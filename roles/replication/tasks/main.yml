---
#
# replication.yml -  Playbook Used to setup MySQL GTIDs replication on slave and etl to master server.
#

- name: Reset master binlog
  ansible.builtin.command:
    mysql -e "reset master"
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"
  failed_when: false

- name: Stop MySQL on replica and etlreplica
  ansible.builtin.systemd:
    name: mysql
    state: stopped
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"
  failed_when: false 

- name: Remove auto.cnf from datadir on Replica's if it exists
  ansible.builtin.file:
    path: /var/lib/mysql/auto.cnf
    state: absent
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"

- name: Start MySQL on replica and etlreplica
  ansible.builtin.systemd:
    name: mysql
    state: started
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"
  failed_when: false

- name: Wait for MySQL before proceeding on Slave
  ansible.builtin.wait_for:
    port: 3306
    host: "{{ ansible_hostname }}"
    delay: 10
    timeout: 60
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"

- name: Get the primary replication status
  community.mysql.mysql_replication:
    mode: getprimary
    login_user: root
    login_password: "{{ mysql_root_pass }}"
  delegate_to: primary
  register: repl_stat

- name: Debug | Repl_stat
  ansible.builtin.debug:
    var: repl_stat

- name: Purge gtids Slave
  ansible.builtin.command:
    mysql -e "SET GLOBAL gtid_purged='{{ repl_stat.Executed_Gtid_Set }}'"
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"

- name: Stop Replication
  community.mysql.mysql_replication:
    mode: stopreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"

- name: Restart MyQSL
  ansible.builtin.systemd:
    name: mysql
    state: restarted
  when: ansible_hostname == "primary"

- name: Wait for MySQL before proceeding on Slave
  ansible.builtin.wait_for:
    port: 3306
    host: "{{ ansible_hostname }}"
    delay: 10
    timeout: 60
  delegate_to: primary  
  when: ansible_hostname == "primary"


- name: Change primary to start replication on Slave
  community.mysql.mysql_replication:
    mode: changeprimary
    primary_host: "{{ primary }}"
    primary_user: repl
    primary_password: "{{ mysql_repl_pass }}"
    primary_auto_position: 1
    login_user: root
    login_password: "{{ mysql_root_pass }}"
  failed_when: false
  #ignore_errors: true
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"
  register: repl_stat3

- name: Debug | Repl_stat3 | Replication Status
  ansible.builtin.debug:
    var: repl_stat3

- name: Start Replication on Slave
  community.mysql.mysql_replication:
    mode: startreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"

- name: Check replication
  community.mysql.mysql_replication:
    mode: getreplica
    login_port: 3306
    login_user: root
    login_password: "{{ mysql_root_pass }}"
  register: repl_stat2

- name: Debug | Repl_stat2 | Replication status
  ansible.builtin.debug:
    var: repl_stat2
    
- name: Debug | Repl_stat2 | Source_Host
  ansible.builtin.debug:
  #  var: (repl_stat2.Master_Host,repl_stat2.Slave_IO_Running,repl_stat2.Slave_SQL_Running,repl_stat2.Executed_Gtid_Set)
    var: (repl_stat2.Source_Host,repl_stat2.Replica_IO_Running,repl_stat2.Replica_SQL_Running,repl_stat2.Source_UUID)
  when: ansible_hostname == "replica" or ansible_hostname == "etlreplica"
